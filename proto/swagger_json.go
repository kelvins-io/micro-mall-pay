package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x08\xb5\xc7\x20\x4e\xd3\xa2\x87\xdc\xb4\x8a\x9a\x04\x49\xec\xc0\x3f\x40\x8b\x22\x10\x68\x69\xec\x70\x21\x91\x0a\x49\x65\xd7\x28\x02\xf4\xb8\x97\xb6\x97\x6d\x51\xa0\x87\xde\x7a\xed\xa5\xe8\x16\xcd\xeb\x6c\xd2\x7d\x8c\x82\xb2\x6c\x4b\x14\xe5\x1f\xd9\xdb\x66\x81\x08\x08\x10\x71\x86\xc3\x99\xe1\x37\xc3\x8f\xf2\x37\x0d\x84\x2c\xf1\x02\x8f\x46\xc0\xad\x03\x64\xed\xef\xee\x59\x3b\x6a\x8c\xd0\x21\xb3\x0e\x90\x92\x23\x64\x49\x22\x43\x50\xf2\x98\x33\xc9\x9a\x11\xf1\x39\xf3\x22\x1c\x86\x5e\x8c\xc7\xde\x64\x50\xfd\x37\x48\x04\xa1\x20\x44\xe1\x65\x37\x95\xa7\x66\x11\xb2\x6e\x80\x0b\xc2\xa8\x32\x96\xfd\x8b\x28\x93\x48\x80\xb4\x1a\x08\xdd\xa6\x8b\xfb\x8c\x8a\x24\x02\x61\x1d\xa0\xaf\x27\xb3\x70\x1c\x87\xc4\xc7\x92\x30\xda\x7c\x2e\x18\x55\xba\x97\xa9\x6e\xcc\x59\x90\xf8\x2b\xea\x62\x79\x25\xe6\x51\x35\x6f\x3e\x69\x4a\x8e\x03\x68\x62\xdf\x67\x09\x95\x33\x11\x42\xd6\x08\xf2\xaf\x2a\x4b\x49\x14\x61\x3e\x56\x8e\xbf\xfb\xfe\xcd\xfd\x0f\x3f\xbd\xfb\xe3\xb7\x87\x57\x6f\xb2\xb8\x52\x15\x16\x03\x4f\xd7\x3d\x09\x94\xda\x05\x1e\x3f\xcb\x72\xd0\x05\x7e\x43\x7c\xf0\x8e\x40\xda\xd9\x5a\xb9\x79\x1c\x44\xcc\xa8\x00\x51\x58\x11\x21\x6b\x7f\x6f\x4f\x1b\x42\xc8\x0a\x40\xf8\x9c\xc4\x32\xcb\xa2\x8d\x44\xe2\xfb\x20\xc4\x30\x09\xd1\xd4\xd2\x6e\xce\xfc\xc4\x7b\xff\x0a\x22\x5c\x32\x86\x90\xf5\x31\x87\xa1\xb2\xf3\x51\x33\x80\x21\xa1\x44\xd9\x2d\x6e\xe0\xdc\xe9\x4e\x66\xde\x2a\x18\xb9\xcd\xbd\xdd\xe6\xd7\xb5\x02\x18\xe2\x24\x94\xcb\x63\xa0\x28\xa1\xf0\x32\x06\x5f\x42\x80\x80\x73\xc6\x67\xa1\x6c\x1a\x09\x4f\xa8\x24\x11\xb8\xca\xe8\x02\xbf\x1b\x86\x08\xac\x18\x73\x1c\x81\x04\x3e\x87\xd7\xe4\xd1\xc2\xa1\x38\x4a\xcb\x83\xbd\xa0\xc0\x75\x87\x49\x1a\xe2\x75\x02\x7c\xac\x8b\x38\x5c\x27\x84\x83\x42\xcb\x10\x87\x02\x34\xb1\x1c\xc7\xa9\x59\x21\x39\xa1\x23\xab\x2a\xcd\x15\xce\x64\xa0\xf6\x52\x2b\xef\xcb\x27\x4d\x0a\x34\x89\xb4\x54\xa5\xe3\x17\xc0\x55\x25\xee\xe8\xe3\x0e\x8b\x62\x4c\x75\x1f\x10\xb2\xba\x63\x21\x21\x2a\xee\xd7\xe5\x8e\x0e\xa2\x29\xba\xa6\xf6\xd7\xcc\x90\xcf\x08\x7d\x14\xe9\x71\x5a\x5f\x95\x53\xd0\xef\x1e\xae\x1c\xbf\x32\x60\x44\x73\x6e\x8e\x25\xf1\x48\xc7\xb1\xa1\x47\xcd\xed\x5c\x36\xb4\x54\x5a\x31\x13\xd5\x5d\xf1\xfe\xd5\x2f\xf7\x77\x7f\xd7\xe9\x8a\x0e\x07\x2c\xe1\xc3\x6b\x8c\x05\xbf\x9f\x7a\x63\xf6\x54\x14\xdb\x80\x05\xa5\x62\x9a\xd4\x99\x49\x92\x2b\x33\xc9\x13\xbd\xca\xb6\xb8\x69\xd7\x09\x08\xb9\x4a\xec\x5b\xa9\xa4\x46\x2e\x8b\x39\xfe\x11\xe3\x71\x9e\x7b\x2c\x2c\xb3\x7f\xee\x7e\x7d\xfb\xd7\xb7\x0f\xaf\xff\xbc\xff\xee\xc7\x87\xd7\xbf\xbf\xbd\xfb\x79\xbd\x62\xeb\xa9\x15\x2f\xf0\xf8\x03\xaa\xb3\xa9\xcb\x4f\x25\x96\x3d\x8f\xbc\xc4\xe6\xfb\xf5\x7f\x54\xd7\xec\x1a\x91\x73\x6f\x4e\xfa\xf3\x7e\x66\x4d\xc0\xa5\x92\x17\xea\x6f\x7a\x88\xb3\xc1\x73\xf0\xe7\x07\x92\xba\x6b\xc4\xc0\x25\xd1\xea\xa4\xc8\xb4\xb4\x0a\x5a\x9e\xad\xcc\x8b\x9e\x9a\x6c\x84\xc1\x9c\xa6\xac\x6d\xdb\x61\x84\x56\x1b\x1e\xe0\x10\x53\xbf\x64\xb6\x8a\x76\xde\x1a\xbb\x58\x55\x28\x86\x7c\x6a\xa4\xa8\x4c\x87\xca\x3c\xd1\xc0\x10\x35\x6e\x38\x43\x4e\x15\x1f\x34\x39\x3a\xcb\x4b\x2d\x2f\x8b\x74\x2d\x4f\xd4\x8c\xce\xcc\xc8\x99\xd9\x93\x28\x62\x74\xd6\xd9\x36\x40\xa1\xcf\x82\x1a\x08\xe9\x80\x74\xd4\x44\x23\x40\x22\x31\xda\x1e\x38\x8c\x07\xef\x06\xf1\x4e\x2e\x5b\xab\xba\xb7\xf3\x54\xae\xcb\x76\x64\x1b\x10\x54\x60\xae\x13\x77\xa1\x08\x16\xee\x9a\x09\xe6\xf5\x53\x60\xf8\xb6\xb1\x41\xfc\xa0\x4e\x12\x2f\x24\x42\xe7\x1c\x33\x4b\x98\x73\x5c\x3c\x89\x2d\x22\x21\xd2\x89\xd7\x3a\x48\x9c\x1c\x5f\x66\x32\xb1\x34\xfe\x69\xf9\xd7\xea\x83\xdd\xbe\xe3\xb8\xdd\x6e\xbe\x17\xba\x9d\x4e\xbb\x53\x6c\x8e\x6e\xc7\x6b\xb5\x7b\x9e\xfb\xe5\x49\xb7\x57\x92\x94\x46\xcf\xdd\x8e\x73\x6c\xb7\x7a\xe6\x39\x33\x69\x49\xd2\x3d\x6e\x5f\x98\xe7\xa4\x92\xf2\xe8\x69\xbf\x42\xfd\xb4\x6f\x1e\xb4\xcf\xdb\xfd\xa9\x5f\xad\x76\xff\xe8\xb8\x14\xcc\x33\xfb\xcc\x6e\x39\x6e\x85\xca\xcc\xf7\xc5\x6a\xb6\xe3\xa4\xeb\x9c\xb5\x9d\x53\xe3\xf4\xa9\xc2\xe2\x04\x4d\xb5\xba\x3d\xbb\xe7\x96\x8c\xa5\xee\x2e\x34\x54\xd0\x30\x1b\x39\x74\x9d\x93\x73\xfb\xcc\xbb\xb0\x3b\x5d\xd7\x73\x3b\x85\x7d\xef\x75\xec\x56\xd7\x76\x7a\x27\xed\x96\xf7\x85\x7d\x72\xe6\x1e\x9a\x82\x9c\x2c\xbb\xe8\xf0\x9c\x62\xac\x12\xc1\x29\xd9\x3c\x62\x2c\x10\x87\x20\x31\x09\x37\x22\x72\x91\xf6\x19\x18\xad\x7a\xa6\x70\x08\x12\x3f\xbb\x4f\x6c\xa9\x35\x4d\x59\xf4\xc6\xf4\x94\x25\xd2\x4b\xef\x99\x1e\x65\x75\x62\x53\xf7\x17\x0f\x5e\xc6\x84\xaf\xde\x78\x73\xd3\x29\x93\x64\x38\xf6\x12\x1e\xd6\x99\x5d\xbc\xaa\xad\x3d\x3d\x02\xee\x5f\xe1\x7a\x7b\x8a\xa5\xc4\xfe\x55\x3d\xa7\x35\x24\xa2\x35\x2e\x4e\x79\x2c\xd7\x80\xcb\x16\x98\x55\xf9\xe7\x90\x95\x23\x7f\x6f\xe4\xe7\xbf\x3d\x5a\x8b\xb5\x67\x3e\x5b\x0b\x5f\x5d\xbc\x84\x04\x4b\xf2\x55\xf0\x6c\xc8\x78\x84\xd3\x06\x47\xa8\xfc\xfc\x33\x73\xcc\x2c\xf6\x48\xbc\xfd\x86\xf2\xd8\x99\xde\xa4\x57\x2d\xcd\xe7\xb2\xc8\x39\x93\x6c\x90\x0c\x6d\xba\x51\xf3\x54\xfa\x75\x7b\xd7\x0d\x0e\x93\x65\x2d\xb3\x02\x15\x83\xb1\x84\x65\x11\x16\x3e\x2d\x6d\xc2\x5a\x35\x03\x2b\xc7\xb7\x88\x8a\x13\x2a\x61\xa4\xfd\x18\x56\x44\xfd\xa7\xfb\x55\x2d\x5b\x08\x3c\xaa\x75\xd4\x4c\xfa\x6e\xe9\x2b\xe6\xd6\x3a\x44\x0e\x52\xe6\x9e\x50\xdc\xa7\x86\xfa\xbb\x6d\xfc\x1b\x00\x00\xff\xff\xc3\x19\xe0\xa3\x65\x1f\x00\x00")

func proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json,
		"proto/micro_mall_pay_proto/pay_business/pay_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_pay_proto/pay_business/pay_business.swagger.json": proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_pay_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"pay_business": &_bintree_t{nil, map[string]*_bintree_t{
				"pay_business.swagger.json": &_bintree_t{proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}
