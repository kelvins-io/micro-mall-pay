package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4f\x6f\xdb\x36\x14\xbf\xfb\x53\x10\xda\x8e\x41\xdd\x75\xc3\x0e\xbd\xa9\xb2\x96\x18\x49\x6c\x43\xb6\x81\x16\x43\x20\xd0\xd2\xb3\xc3\x42\x22\x15\x92\x4a\x63\x0c\x01\x76\xec\x65\xdb\xa5\x1b\x06\xec\xb0\xdb\xae\xbb\x0c\xeb\xb0\x7c\x9d\x26\xeb\xc7\x18\x28\xcb\xb6\xfe\x50\xfe\x23\xbb\x5b\x0a\xc4\x40\x80\x98\x8f\x7c\x7c\x7f\x7e\xef\xf1\x47\xfa\x9b\x06\x42\x86\x78\x85\x27\x13\xe0\xc6\x53\x64\x3c\x79\xf4\xd8\x38\x50\x63\x84\x8e\x99\xf1\x14\x29\x39\x42\x86\x24\x32\x00\x25\x8f\x38\x93\xac\x19\x12\x8f\x33\x37\xc4\x41\xe0\x46\x78\xea\xce\x06\xd5\x7f\xa3\x58\x10\x0a\x42\xe4\xbe\x3c\x4a\xe4\x89\x5a\x84\x8c\x4b\xe0\x82\x30\xaa\x94\xa5\xff\x22\xca\x24\x12\x20\x8d\x06\x42\xd7\xc9\xe6\x1e\xa3\x22\x0e\x41\x18\x4f\xd1\xd7\xb3\x55\x38\x8a\x02\xe2\x61\x49\x18\x6d\xbe\x14\x8c\xaa\xb9\x67\xc9\xdc\x88\x33\x3f\xf6\x36\x9c\x8b\xe5\xb9\x58\x7a\xd5\xbc\xfc\xac\x29\x39\xf6\xa1\x89\x3d\x8f\xc5\x54\x2e\x44\x08\x19\x13\xc8\x7e\x55\x51\x8a\xc3\x10\xf3\xa9\x32\xfc\xfd\xf7\x6f\x6f\x7f\xf8\xe9\xfd\x1f\xbf\xdd\xbd\x7e\x9b\xfa\x95\x4c\x61\x11\xf0\x64\xdf\xb6\xaf\xa6\xf5\xf0\xf4\x59\x1a\x83\x3e\xf0\x4b\xe2\x81\x7b\x08\xd2\x4c\xf7\xca\xac\xe3\x20\x22\x46\x05\x88\xdc\x8e\x08\x19\x4f\x1e\x3f\x2e\x0c\x21\x64\xf8\x20\x3c\x4e\x22\x99\x46\xd1\x44\x22\xf6\x3c\x10\x62\x1c\x07\x68\xae\xe9\x51\x46\xfd\xcc\x7a\xef\x1c\x42\x5c\x52\x86\x90\xf1\x29\x87\xb1\xd2\xf3\x49\xd3\x87\x31\xa1\x44\xe9\xcd\x27\x70\x69\xb4\x93\xaa\x37\x72\x4a\xae\x33\xdf\xae\xb3\xfb\x1a\x3e\x8c\x71\x1c\xc8\xf5\x3e\x50\x14\x53\xb8\x8a\xc0\x93\xe0\x23\xe0\x9c\xf1\x85\x2b\xbb\x7a\xc2\x63\x2a\x49\x08\xb6\x52\xba\xc2\xee\x86\xc6\x03\x23\xc2\x1c\x87\x20\x81\x2f\xe1\x35\xfb\x14\xdc\xa1\x38\x4c\xca\x83\xbd\xa2\xc0\x8b\x06\x93\xc4\xc5\x8b\x18\xf8\xb4\x28\xe2\x70\x11\x13\x0e\x0a\x2d\x63\x1c\x08\x28\x88\xe5\x34\x4a\xd4\x0a\xc9\x09\x9d\x18\x55\x61\xae\x30\x26\x05\xb5\x9b\x68\xf9\x50\x36\x15\xa4\x40\xe3\xb0\x10\xaa\x64\xbc\x07\x5c\x55\xe2\x41\x71\xdc\x62\x61\x84\x69\xd1\x06\x84\x8c\xfe\x54\x48\x08\xf3\xf9\x3a\x3b\x28\x82\x68\x8e\xae\xb9\xfe\x2d\x23\xe4\x31\x42\xef\x45\x78\xac\xce\x8b\x72\x08\x86\xfd\xd6\xc6\xfe\x2b\x05\x5a\x34\x67\xd6\x18\x12\x4f\x8a\x38\xd6\xf4\xa8\xa5\x9e\xb3\x46\x21\x94\x46\xc4\x44\x75\x57\xbc\x7d\xfd\xcb\xed\xcd\xdf\x75\xba\xa2\xc5\x01\x4b\xf8\xf8\x1a\x63\xce\xee\x87\xde\x98\x7e\x2a\x8a\x6d\xc4\xfc\x52\x31\xcd\xea\x4c\x27\xc9\x94\x99\xe4\x71\xb1\xca\xf6\x98\xb4\x8b\x18\x84\xdc\xc4\xf7\xbd\x54\x52\x23\x13\xc5\x0c\xff\x88\xf0\x34\xcb\x3d\x56\x96\xd9\x3f\x37\xbf\xbe\xfb\xeb\xdb\xbb\x37\x7f\xde\x7e\xf7\xe3\xdd\x9b\xdf\xdf\xdd\xfc\xbc\x5d\xb1\x0d\xd4\x8e\x3d\x3c\xfd\x88\xea\x6c\x6e\xf2\x43\x89\xa5\x9f\x7b\x5e\x62\xcb\x7c\xfd\x1f\xd5\xb5\xb8\x46\x64\xcc\x5b\x92\xfe\xac\x9d\x69\x13\xb0\xa9\xe4\xb9\xfa\x9b\x1f\xe2\x6c\xf4\x12\xbc\xe5\x81\xa4\xee\x1a\x11\x70\x49\x0a\x75\x92\x67\x5a\x85\x0a\x5a\x1f\xad\xd4\x8a\x81\x5a\xac\x85\xc1\x92\xa6\x6c\xad\xdb\x62\x84\x56\x2b\x1e\xe1\x00\x53\xaf\xa4\xb6\x8a\x76\x5e\x6b\xbb\x58\x95\x2b\x9a\x78\x16\x48\x51\x99\x0e\x95\x79\xa2\x86\x21\x16\xb8\xe1\x02\x39\x55\x7c\x50\x67\xe8\x22\x2e\xb5\xac\xcc\xd3\xb5\x2c\x51\xd3\x1a\xb3\x20\x67\x7a\x4b\xc2\x90\xd1\x45\x67\xdb\x01\x85\x1e\xf3\x6b\x20\xc4\x01\x69\xa9\x85\x5a\x80\x84\x62\xb2\x3f\x70\x68\x0f\xde\x1d\xfc\x9d\x5d\xb6\x36\x35\xef\xe0\xa1\x5c\xd7\x65\x64\x1f\x10\x54\x60\xae\xe3\x77\xae\x08\x56\x66\x4d\x07\xf3\xfa\x21\xd0\xbc\x6d\xec\xe0\x3f\xa8\x93\xc4\x0d\x88\x28\x72\x8e\x85\x26\xcc\x39\xce\x9f\xc4\x06\x91\x10\x16\x89\xd7\x36\x48\x9c\x1d\x5f\x7a\x32\xb1\xd6\xff\x79\xf9\xd7\xea\x83\xfd\xa1\x65\xd9\xfd\x7e\xb6\x17\xda\x8e\xd3\x75\xf2\xcd\xd1\x76\xdc\x4e\x77\xe0\xda\xcf\xdb\xfd\x41\x49\x52\x1a\x3d\xb5\x1d\xeb\xc8\xec\x0c\xf4\x6b\x16\xd2\x92\xa4\x7f\xd4\xed\xe9\xd7\x24\x92\xf2\xe8\xf1\xb0\x62\xfa\xf1\x50\x3f\x68\x9e\x76\x87\x73\xbb\x3a\xdd\xe1\xe1\x51\xc9\x99\x67\xe6\x89\xd9\xb1\xec\x8a\x29\x0b\xdb\x57\x4f\x33\x2d\x2b\xd9\xe7\xa4\x6b\x1d\x6b\x97\xcf\x27\xac\x0e\xd0\x7c\x56\x7f\x60\x0e\xec\x92\xb2\xc4\xdc\x95\x8a\x72\x33\xf4\x4a\x5a\xb6\xd5\x3e\x35\x4f\xdc\x9e\xe9\xf4\x6d\xd7\x76\x72\x79\x1f\x38\x66\xa7\x6f\x5a\x83\x76\xb7\xe3\x7e\x65\xb6\x4f\xec\x96\xce\xc9\xd2\xb6\x03\xc7\x6c\xd9\x6e\xcf\x7c\xe1\x3a\xc3\x8e\x5e\xa0\x41\xdd\x52\x68\x3f\xef\xb5\x1d\xbb\x2c\xeb\x3a\xad\x14\x87\xa7\xe6\xc0\x3a\x72\x95\x7b\x2b\x0f\xed\xf9\x2e\x95\x95\x93\x90\xdc\x43\xc6\x7c\xd1\x02\x89\x49\xb0\x13\x81\x0c\x0b\xcf\xcf\x68\xd3\xb3\x8c\x83\x1f\x7b\xe9\x3d\x66\x4f\x2d\x71\xce\xde\x77\xa6\xc5\x2c\x96\x6e\x72\xbf\x75\x29\xab\xe3\x9b\xba\x37\xb9\x70\x15\x11\xbe\x79\xc3\xcf\x2c\xa7\x4c\x92\xf1\xd4\x8d\x79\x50\x67\x75\xfe\x8a\xb8\xf5\xf2\x10\xb8\x77\x8e\xeb\xe5\x14\x4b\x89\xbd\xf3\x7a\x46\x17\x90\x88\xb6\xb8\xb0\x65\xb1\x5c\x03\x2e\x7b\x60\x74\xe5\x9f\x61\x36\xf6\xfc\x83\x91\xae\xff\xf6\x48\xcf\xd7\x9e\xfe\x4c\xcf\xbd\xf6\xb8\x31\xf1\xd7\xc4\x2b\x67\xd9\x98\xf1\x10\x27\x0d\x8e\x50\xf9\xe5\x17\x7a\x9f\x59\xe4\x92\xa8\x4e\x16\x92\x8a\xbf\xda\x33\x45\x2b\xbd\xfe\xdc\x53\x82\x3a\x6b\x75\x6b\xd3\xb1\xce\x73\xce\x24\x1b\xc5\x63\x93\xee\xd4\x7b\xd5\xfc\xba\xad\xef\x12\x07\xf1\xba\xfc\x55\x80\x6a\x34\x95\xb0\xce\xc3\xdc\x8b\xd8\x2e\x64\xbb\xa0\x60\x63\xff\x56\xc1\x93\x50\x09\x93\xc2\x6f\x78\xf9\xa2\xf9\xfc\x49\x55\xc7\x17\x02\x4f\x6a\x9d\x54\xb3\xb6\x5d\x7a\x7c\xdd\x5b\x83\xc9\x40\x4a\xdf\x52\xf2\x79\x6a\xa8\xbf\xeb\xc6\xbf\x01\x00\x00\xff\xff\x9c\x28\x06\xf4\x1c\x20\x00\x00")

func proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json,
		"proto/micro_mall_pay_proto/pay_business/pay_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_pay_proto/pay_business/pay_business.swagger.json": proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_pay_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"pay_business": &_bintree_t{nil, map[string]*_bintree_t{
				"pay_business.swagger.json": &_bintree_t{proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}
