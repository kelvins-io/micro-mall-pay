package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x4b\x6f\x1b\x37\x10\xbe\xeb\x57\x10\x6c\x8f\x85\xe5\x06\x45\x0f\xbe\x29\x1b\x21\x0e\x9c\x48\xae\x1e\x40\x8b\xc2\x58\xd0\xdc\x91\xcc\x60\x49\xae\xf9\x70\x2b\x14\x02\x7c\xec\xa5\xcd\x25\x2d\x7a\x0b\xd0\x22\xb7\x02\xb9\x05\x05\x02\xf4\xd7\xc4\x6a\xfb\x2f\x0a\x52\x0f\x73\x1f\xb2\x36\xb2\x8b\xda\xb0\x4f\x5a\xce\xcc\xc7\x6f\x86\xdf\x90\xe3\xef\x1a\x08\x61\xfd\x0d\x19\x8f\x41\xe1\x3d\x84\x1f\xec\xec\xe2\x4f\xdc\x1a\x13\x23\x89\xf7\x90\xb3\x23\x84\x0d\x33\x29\x38\x7b\xa6\xa4\x91\x4d\xce\xa8\x92\x31\x27\x69\x1a\x67\x64\x12\xcf\x17\xdd\xaf\x63\xab\x99\x00\xad\x73\x1f\x3b\xde\xee\x61\x11\xc2\x67\xa0\x34\x93\xc2\x81\x2d\x7e\x22\x21\x0d\xd2\x60\x70\x03\xa1\xa9\xdf\x9c\x4a\xa1\x2d\x07\x8d\xf7\xd0\xd7\xf3\x28\x92\x65\x29\xa3\xc4\x30\x29\x9a\xcf\xb5\x14\xce\xf7\xc8\xfb\x66\x4a\x26\x96\xd6\xf4\x25\xe6\x44\x5f\x66\xd5\x3c\xfb\xb4\x69\x14\x49\xa0\x49\x89\xa0\x90\xae\x2c\xce\xd5\x9a\xe0\xd3\x15\xc9\x72\x4e\xd4\xc4\xf1\x9e\xbd\x7c\x7b\xf1\xc3\x4f\x17\x2f\x7e\x9e\xbd\xfd\x7e\x91\x96\x77\x91\x19\x28\xbf\xed\x93\xc4\xb9\x0d\x1c\x74\x34\x47\x0e\xbc\x14\xe8\x4c\x0a\x0d\x3a\x87\x8f\x10\x7e\xb0\xbb\x5b\x58\x42\x08\x27\xa0\xa9\x62\x99\x59\x94\xac\x85\xb4\xa5\x14\xb4\x1e\xd9\x14\x2d\x91\x76\x02\xf8\x39\x57\x7a\x02\x9c\x94\xc0\x10\xc2\x1f\x2b\x18\x39\x9c\x8f\x9a\x09\x8c\x98\x60\x0e\x37\x7f\x5a\x01\xeb\xde\x02\x1f\xe7\x50\xa6\x8d\xaa\xdf\xd3\x20\xc3\x8c\x28\xc2\xc1\x80\xba\x3c\x94\xf9\x5f\x21\x37\x41\xb8\x17\xd5\xb1\x4c\x26\xc5\x14\x98\x58\x67\x51\x70\x6a\x99\x02\x57\x62\xa3\x2c\xfc\x57\xa9\x9f\x5a\xd0\xa6\x4e\xe6\x47\x41\xe6\x86\x8c\x8b\x39\xe3\x43\x32\x79\xb8\xd8\xa0\x0f\xea\x8c\xd1\xa0\x9e\x47\x8d\x10\x6d\x51\xc3\x92\x2e\x9b\xa7\x16\xbc\xf2\x6a\xa9\xf3\xaf\x77\xaf\xde\xff\x71\x3e\xd7\xe8\x3f\xe7\xe7\xb3\xdf\xff\x9c\xfd\xf8\xfa\xe2\xc5\x6f\x9b\x94\xda\x83\x91\x15\xc9\x5d\x53\xea\x9c\xf5\xbd\x54\xea\x32\xf5\x5b\xa1\xd4\x8c\xe4\x05\x2a\x75\x3d\x85\xce\x5e\xbe\x79\xff\xee\x97\x4d\xda\x3c\x24\x93\xbb\x26\xcc\x43\x32\xb9\x97\xaa\xf4\x79\xdf\x0a\x49\x96\x6f\xcd\xda\xa2\x7c\xf5\xfa\xef\x37\xbf\x6e\x12\xe5\x17\x1e\xff\x8e\xc9\xd2\x93\xbe\x97\xc2\x5c\x64\xfe\x7f\x48\x73\x35\xd8\x06\x04\x2f\xc7\xd0\x90\x69\x24\x99\x18\x4c\x32\x08\x65\x6b\xe6\xdf\x58\x1b\xc5\xc4\x78\x55\x35\x0c\xc2\xf2\x1c\x29\x1c\x75\xbe\x0a\xf5\x38\xec\x3f\x5a\x52\x5a\x25\xe3\x28\x10\x9b\xba\x3e\xf0\xee\xb9\xde\xc9\x33\xe1\x5c\x8a\x95\x52\x2a\xf8\xc8\xe3\xe7\x40\xcd\x25\x9f\x4c\xb9\x2e\x31\xac\xa0\x7f\x4c\x65\x02\xc5\x8e\xd8\x7c\x66\x3d\x30\x91\x0b\xac\x14\x22\xd7\xe3\x22\x62\xa1\x4a\x8d\xe2\x81\x4e\xd7\x66\xba\xdc\x69\xab\x92\xf7\x87\x51\xd4\xee\xf7\xc3\xb2\xb7\x7b\xbd\x6e\x2f\x7f\x0e\xed\x5e\xdc\xe9\x0e\xe2\xf6\x97\x4f\xfa\x83\x92\xa5\xb4\xfa\xac\xdd\x8b\xf6\x5b\x9d\x41\x75\xcc\xca\x5a\xb2\xf4\xf7\xbb\x87\xd5\x31\xde\x52\x5e\x3d\x18\xae\x71\x3f\x18\x56\x2f\xb6\x9e\x75\x87\x4b\x5e\x9d\xee\xf0\xf1\x7e\x29\x99\x87\xad\xa7\xad\x4e\xd4\x5e\xe3\xb2\xe2\x7e\xb5\x5b\x2b\x8a\xfc\x3e\x4f\xbb\xd1\xc1\x95\x0a\x5e\x56\x7f\xed\xd9\x56\x8c\xf4\xeb\x95\x5c\x0f\x65\x63\x43\x5c\x0d\xf3\x58\xca\x44\x3f\x02\x43\x58\x7a\x9d\xa6\x22\x5c\x5a\x61\x36\x34\x41\x78\x85\xe2\x91\x54\x9c\xf8\xaa\x31\x61\x3e\xff\xac\xba\xb1\xa8\x64\x22\x36\xf9\x0b\x08\xd5\x6b\xd8\xd5\xd5\x55\x09\xac\x20\xb1\x74\xf1\xd6\xdd\x00\xe5\x8d\x4d\x5d\x9c\x45\xae\x51\x6a\x69\x4d\xec\x27\x8a\x58\xc8\xda\xb7\x4e\xf8\x78\x30\x0e\x31\x7c\x9b\x31\x55\xaa\x6a\x9d\x70\x21\x0d\x1b\x4d\x62\xab\xd2\x6d\xa2\xf3\x53\xc6\x07\x87\x73\x50\xf4\x84\x6c\x14\x5a\x65\x2c\x31\x86\xd0\x93\xad\x22\x29\xad\xa1\xee\x35\xf9\x16\x3a\x0b\x7d\xc0\x88\x10\xf6\xe6\x56\x5a\xbb\x89\xc7\xd2\x3d\xbb\xdb\x74\x5f\xee\xb9\xae\x16\xa2\x17\x31\x4b\x6e\xee\xe9\x2c\x0f\x56\xdb\x5e\x8b\xf9\xb9\x74\x5b\x94\xfc\xbf\xc4\xd7\x45\xa9\x49\xc6\x4d\x77\x8d\x69\xe3\xdf\x00\x00\x00\xff\xff\x81\xf1\xf5\x1c\x4b\x15\x00\x00")

func proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json,
		"proto/micro_mall_pay_proto/pay_business/pay_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_pay_proto/pay_business/pay_business.swagger.json": proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_pay_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"pay_business": &_bintree_t{nil, map[string]*_bintree_t{
				"pay_business.swagger.json": &_bintree_t{proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
