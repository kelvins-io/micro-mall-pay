package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x08\xb5\xc7\x20\x4e\xd3\xa2\x87\xdc\xb4\x8a\x9a\x04\x49\x6c\x43\xb6\x81\x2e\x8a\x40\xa0\xa5\xb1\xc3\x85\x44\x2a\x24\x95\x8d\x51\x04\xe8\x71\x2f\x6d\x2f\xdb\xa2\x40\x0f\xbd\xf5\xda\x4b\xd1\x2d\x9a\xd7\xd9\xa4\xfb\x18\x05\x65\xd9\xd6\x0f\xe5\x1f\xd9\xdb\xcd\x02\x31\x10\x20\xe6\x0c\x87\x33\xc3\x6f\x86\x1f\xe9\x6f\x1b\x08\x19\xe2\x25\x1e\x8d\x80\x1b\x07\xc8\xd8\xdf\xdd\x33\x76\xd4\x18\xa1\x43\x66\x1c\x20\x25\x47\xc8\x90\x44\x06\xa0\xe4\x11\x67\x92\x35\x43\xe2\x71\xe6\x86\x38\x08\xdc\x08\x8f\xdd\xc9\xa0\xfa\x6f\x10\x0b\x42\x41\x88\xdc\x97\xdd\x44\x9e\x98\x45\xc8\xb8\x06\x2e\x08\xa3\xca\x58\xfa\x2f\xa2\x4c\x22\x01\xd2\x68\x20\x74\x9b\x2c\xee\x31\x2a\xe2\x10\x84\x71\x80\xbe\x99\xcc\xc2\x51\x14\x10\x0f\x4b\xc2\x68\xf3\x85\x60\x54\xe9\x5e\x24\xba\x11\x67\x7e\xec\xad\xa8\x8b\xe5\xa5\x98\x47\xd5\xbc\xfe\xac\x29\x39\xf6\xa1\x89\x3d\x8f\xc5\x54\xce\x44\x08\x19\x23\xc8\x7e\x55\x59\x8a\xc3\x10\xf3\xb1\x72\xfc\xdd\x0f\x6f\xee\x7f\xfc\xf9\xdd\x9f\xbf\x3f\xbc\x7a\x93\xc6\x95\xa8\xb0\x08\x78\xb2\xee\x89\xaf\xd4\x3a\x78\xfc\x2c\xcd\x41\x17\xf8\x35\xf1\xc0\x3d\x02\x69\xa6\x6b\x65\xe6\x71\x10\x11\xa3\x02\x44\x6e\x45\x84\x8c\xfd\xbd\xbd\xc2\x10\x42\x86\x0f\xc2\xe3\x24\x92\x69\x16\x4d\x24\x62\xcf\x03\x21\x86\x71\x80\xa6\x96\x76\x33\xe6\x27\xde\x7b\x97\x10\xe2\x92\x31\x84\x8c\x4f\x39\x0c\x95\x9d\x4f\x9a\x3e\x0c\x09\x25\xca\x6e\x7e\x03\xe7\x4e\x3b\xa9\x79\x23\x67\xe4\x36\xf3\xed\x36\xbb\xae\xe1\xc3\x10\xc7\x81\x5c\x1e\x03\x45\x31\x85\x9b\x08\x3c\x09\x3e\x02\xce\x19\x9f\x85\xb2\x69\x24\x3c\xa6\x92\x84\x60\x2b\xa3\x0b\xfc\x6e\x68\x22\x30\x22\xcc\x71\x08\x12\xf8\x1c\x5e\x93\x4f\x21\x1c\x8a\xc3\xa4\x3c\xd8\x4b\x0a\xbc\xe8\x30\x49\x42\xbc\x8a\x81\x8f\x8b\x22\x0e\x57\x31\xe1\xa0\xd0\x32\xc4\x81\x80\x82\x58\x8e\xa3\xc4\xac\x90\x9c\xd0\x91\x51\x95\xe6\x0a\x67\x52\x50\xbb\x89\x95\xf7\xe5\x53\x41\x0a\x34\x0e\x0b\xa9\x4a\xc6\x3b\xc0\x55\x25\xee\x14\xc7\x2d\x16\x46\x98\x16\x7d\x40\xc8\xe8\x8e\x85\x84\x30\xbf\x5f\x17\x3b\x45\x10\x4d\xd1\x35\xb5\xbf\x66\x86\x3c\x46\xe8\xa3\x48\x8f\xd5\x7a\x5e\x4e\x41\xbf\x7b\xb8\x72\xfc\xca\x80\x16\xcd\x99\x39\x86\xc4\xa3\x22\x8e\x35\x3d\x6a\x6e\xe7\xa2\x51\x48\xa5\x11\x31\x51\xdd\x15\xef\x5f\xfd\x7a\x7f\xf7\x4f\x9d\xae\x68\x71\xc0\x12\x3e\xbe\xc6\x98\xf3\xfb\xa9\x37\xa6\x9f\x8a\x62\x1b\x30\xbf\x54\x4c\x93\x3a\xd3\x49\x32\x65\x26\x79\x5c\xac\xb2\x2d\x6e\xda\x55\x0c\x42\xae\x12\xfb\x56\x2a\xa9\x91\xc9\x62\x86\x7f\x44\x78\x9c\xe5\x1e\x0b\xcb\xec\xdf\xbb\xdf\xde\xfe\xfd\xdd\xc3\xeb\xbf\xee\xbf\xff\xe9\xe1\xf5\x1f\x6f\xef\x7e\x59\xaf\xd8\x7a\x6a\xc5\x0e\x1e\x7f\x44\x75\x36\x75\xf9\xa9\xc4\xd2\xcf\x23\x2f\xb1\xf9\x7e\x7d\x88\xea\x9a\x5d\x23\x32\xee\xcd\x49\x7f\xd6\xcf\xb4\x09\xd8\x54\xf2\x5c\xfd\x4d\x0f\x71\x36\x78\x01\xde\xfc\x40\x52\x77\x8d\x08\xb8\x24\x85\x3a\xc9\x33\xad\x42\x05\x2d\xcf\x56\xea\x45\x4f\x4d\xd6\xc2\x60\x4e\x53\xd6\xb6\x6d\x31\x42\xab\x0d\x0f\x70\x80\xa9\x57\x32\x5b\x45\x3b\x6f\xb5\x5d\xac\x2a\x14\x4d\x3e\x0b\xa4\xa8\x4c\x87\xca\x3c\x51\xc3\x10\x0b\xdc\x70\x86\x9c\x2a\x3e\xa8\x73\x74\x96\x97\x5a\x5e\xe6\xe9\x5a\x96\xa8\x69\x9d\x99\x91\x33\xbd\x27\x61\xc8\xe8\xac\xb3\x6d\x80\x42\x8f\xf9\x35\x10\xe2\x80\xb4\xd4\x44\x2d\x40\x42\x31\xda\x1e\x38\xb4\x07\xef\x06\xf1\x4e\x2e\x5b\xab\xba\xb7\xf3\x54\xae\xcb\x76\x64\x1b\x10\x54\x60\xae\x13\x77\xae\x08\x16\xee\x9a\x0e\xe6\xf5\x53\xa0\x79\xdb\xd8\x20\x7e\x50\x27\x89\x1b\x10\x51\xe4\x1c\x33\x4b\x98\x73\x9c\x3f\x89\x0d\x22\x21\x2c\x12\xaf\x75\x90\x38\x39\xbe\xf4\x64\x62\x69\xfc\xd3\xf2\xaf\xd5\x07\xbb\x7d\xcb\xb2\xbb\xdd\x6c\x2f\xb4\x1d\xa7\xed\xe4\x9b\xa3\xed\xb8\xad\x76\xcf\xb5\xbf\x3e\xe9\xf6\x4a\x92\xd2\xe8\xb9\xed\x58\xc7\x66\xab\xa7\x9f\x33\x93\x96\x24\xdd\xe3\x76\x47\x3f\x27\x91\x94\x47\x4f\xfb\x15\xea\xa7\x7d\xfd\xa0\x79\xde\xee\x4f\xfd\x6a\xb5\xfb\x47\xc7\xa5\x60\x9e\x99\x67\x66\xcb\xb2\x2b\x54\x66\xbe\x2f\x56\x33\x2d\x2b\x59\xe7\xac\x6d\x9d\x6a\xa7\x4f\x15\x16\x27\x68\xaa\xd5\xed\x99\x3d\xbb\x64\x2c\x71\x77\xa1\xa1\x9c\x86\xde\xc8\xa1\x6d\x9d\x9c\x9b\x67\x6e\xc7\x74\xba\xb6\x6b\x3b\xb9\x7d\xef\x39\x66\xab\x6b\x5a\xbd\x93\x76\xcb\xfd\xca\x3c\x39\xb3\x0f\x75\x41\x96\x96\xed\x39\xe6\xa1\xed\x76\xcc\xe7\xae\xd3\x6f\xe9\x05\x53\xd4\x2d\x3a\x72\x73\x3a\x3a\xdc\x27\x14\xf5\x88\x31\x5f\x1c\x82\xc4\x24\xd8\x88\xfe\x85\x85\xc7\x63\xb4\xea\x49\xc4\xc1\x8f\xbd\xf4\x16\xb2\xa5\x86\x36\xe5\xde\x1b\x93\x5a\x16\x4b\x37\xb9\x9d\xba\x94\xd5\x89\x4d\xdd\x7a\x5c\xb8\x89\x08\x5f\xbd\x5d\x67\xa6\x53\x26\xc9\x70\xec\xc6\x3c\xa8\x33\x3b\x7f\xc1\x5b\x7b\x7a\x08\xdc\xbb\xc4\xf5\xf6\x14\x4b\x89\xbd\xcb\x7a\x4e\x17\x90\x88\xd6\xb8\x6e\x65\xb1\x5c\x03\x2e\x5b\xe0\x63\xe5\x1f\x51\x56\x8e\xfc\xbd\x51\xa6\xff\xf7\x40\xce\xd7\x9e\xfe\x44\xce\xbd\xd5\xb8\x31\xf1\x97\xe4\x2b\xe7\xd9\x90\xf1\x10\x27\x0d\x8e\x50\xf9\xe5\x17\xfa\x98\x59\xe4\x92\xa8\xce\x2e\x24\x15\x7f\xb3\x65\x82\x55\x7a\xbb\x79\xa4\xf4\x72\xd2\xea\x96\x6e\xc7\xb2\xc8\x39\x93\x6c\x10\x0f\x4d\xba\x51\xef\x55\xfa\x75\x5b\xdf\x35\x0e\xe2\x65\xfb\x57\x01\xaa\xc1\x58\xc2\xb2\x08\x73\xef\x59\x9b\x50\xe5\x82\x81\x95\xe3\x5b\x04\x4f\x42\x25\x8c\x0a\xbf\xc0\xe5\x8b\xe6\xf3\xfd\xaa\x8e\x2f\x04\x1e\xd5\x3a\xa9\x26\x6d\xbb\xf4\x74\xba\xb5\x06\x93\x81\x94\xbe\xa5\xe4\xf7\xa9\xa1\xfe\x6e\x1b\xff\x05\x00\x00\xff\xff\xa8\x80\x2c\xca\xda\x1f\x00\x00")

func proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json,
		"proto/micro_mall_pay_proto/pay_business/pay_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_pay_proto/pay_business/pay_business.swagger.json": proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_pay_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"pay_business": &_bintree_t{nil, map[string]*_bintree_t{
				"pay_business.swagger.json": &_bintree_t{proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}
