package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcf\x6f\xdb\xb6\x17\xbf\xe7\xaf\x20\xf4\xfd\x1e\x83\xa6\xeb\x86\x1d\x7a\x53\x15\xb5\x31\x9a\xd8\x86\x6c\x0f\x2d\x86\x42\x60\xa4\x67\x87\x85\x44\xaa\x24\x95\xd6\x18\x02\xf4\x52\xa0\x97\x6d\x97\x6e\x18\xb0\xc3\x6e\xbb\xee\x32\xac\xc3\xba\x3f\xa7\xe9\xfa\x67\x0c\x94\x65\x5b\xa2\x28\x5b\x91\xdd\xd5\x05\x62\x20\x40\xcc\xc7\xf7\xf8\x7e\x7d\x1e\x1f\x5f\xf2\xcd\x1e\x42\x96\x78\x8a\x27\x13\xe0\xd6\x6d\x64\xdd\xba\x71\xd3\xda\x57\x6b\x84\x8e\x99\x75\x1b\x29\x3a\x42\x96\x24\x32\x02\x45\x4f\x38\x93\xec\x20\x26\x01\x67\x7e\x8c\xa3\xc8\x4f\xf0\xd4\x9f\x2d\xaa\xdf\x4e\x53\x41\x28\x08\x51\xfa\x72\x23\xa3\x67\x62\x11\xb2\xce\x81\x0b\xc2\xa8\x12\x96\xff\x8a\x28\x93\x48\x80\xb4\xf6\x10\xba\xc8\x0e\x0f\x18\x15\x69\x0c\xc2\xba\x8d\xbe\x9e\x71\xe1\x24\x89\x48\x80\x25\x61\xf4\xe0\xb1\x60\x54\xed\x7d\x94\xed\x4d\x38\x0b\xd3\xa0\xe1\x5e\x2c\xcf\xc4\xd2\xaa\x83\xf3\xcf\x0e\x70\x10\xb0\x94\xca\xc5\x22\x42\xd6\x04\x8a\x5f\x95\x7f\xd2\x38\xc6\x7c\xaa\x54\x7e\xff\xdd\xeb\xcb\xef\x7f\x7c\xff\xfb\xaf\xef\x5e\xbe\xce\x2d\xca\xb6\xb0\x04\x78\x76\x62\x27\x54\xdb\xfa\x78\x7a\x27\xb7\x7e\x00\xfc\x9c\x04\xe0\xdf\x25\x34\xb4\xf3\xc3\x0a\x8c\x1c\x44\xc2\xa8\x00\x51\x3a\x12\x21\xeb\xd6\xcd\x9b\xda\x12\x42\x56\x08\x22\xe0\x24\x91\xb9\x03\x6d\x24\xd2\x20\x00\x21\xc6\x69\x84\xe6\x92\x6e\x14\xc4\xcf\xd4\x0f\xce\x20\xc6\x15\x61\x08\x59\xff\xe7\x30\x56\x72\xfe\x77\x10\xc2\x98\x50\xa2\xe4\x96\x63\x57\xd0\xda\xcb\xe5\x5b\x25\x29\x17\x85\x6f\x17\xc5\x83\xad\x10\xc6\x38\x8d\xe4\x7a\x23\x28\x4a\x29\x3c\x4b\x20\x90\x10\x22\xe0\x9c\xf1\x85\x2d\x9b\x9a\xc2\x53\x2a\x49\x0c\xae\x12\xba\x42\xef\x3d\x83\x05\x56\x82\x39\x8e\x41\x02\x5f\xa6\xd6\xec\xa3\x99\x43\x71\x9c\x41\x83\x3d\xa5\xc0\x75\x85\x49\x66\xe2\x93\x14\xf8\x54\x27\x71\x78\x92\x12\x0e\x2a\x5f\xc6\x38\x12\xa0\x91\xe5\x34\xc9\xc4\x62\xce\x71\x85\x97\x48\x88\xf5\x8c\x29\x71\x09\xc9\x09\x9d\x68\x26\x6b\x42\x02\x16\x45\x10\x28\x47\xdd\x65\x3c\xc6\x2a\x52\x56\x9c\x46\x92\x58\x75\x31\xad\xb1\x3c\xc7\x90\x9f\x1d\xbe\x75\x07\xe4\xa6\x68\x54\xa0\x69\xac\xc5\x25\x5b\xef\x03\x57\x90\xdf\xd7\xd7\x1d\x16\x27\x98\xea\x3a\x20\x64\x0d\xa6\x42\x42\x5c\xf6\xd4\xa3\x7d\x3d\x63\xe7\xa9\x3c\x97\x7f\x45\x0f\x05\x8c\xd0\x9d\x70\x8f\xd3\x7d\x58\x75\xc1\x68\x70\xd8\xd8\x7e\x25\xc0\x08\x9d\x02\x8f\x25\xf1\x44\x07\x8d\xa1\x24\x2e\xe5\x3c\xda\x2b\x4a\xcb\x1d\x5a\x2c\xcf\x07\xc1\x19\xe6\x13\x28\x56\xe9\x84\x89\x15\x65\x3a\x2b\xd0\x97\x2f\x5e\x5c\x3e\xff\xfb\x6a\x65\x3a\x2f\x76\xce\xec\xbc\x4f\xa7\x50\x97\xf4\xbe\x2e\xd5\xf9\xa7\x06\x8e\xa7\x2c\xac\x96\x54\x5a\x47\x29\x00\x51\xf2\x54\xc7\xe1\x16\x83\xf6\x24\x05\x21\x9b\xd8\xfe\x61\xb1\xa6\x54\x6d\x8c\xb4\xcb\x97\x3f\x5f\xbe\xf9\xab\x4d\x43\xe4\x70\xc0\x12\x3e\xbd\x96\xa8\xa4\xf7\x35\xd2\xf2\xcf\x8e\x23\x4d\x0b\xda\x47\x46\x9a\xe4\x38\x04\xa5\x5f\x63\x98\xfd\xf3\xe6\x97\xb7\x7f\x3e\x7f\xf7\xea\x8f\xcb\x6f\x7f\x78\xf7\xea\xb7\xb7\x6f\x7e\xba\x1a\xd8\x86\xea\xc4\x7e\xa9\x91\xdc\x75\x9c\xcd\x55\xbe\x86\x58\xfe\xd9\x71\x88\x2d\xe3\xf5\x31\xd0\xb5\x98\x1d\x14\xd4\x5b\xbe\xf4\xd7\x5e\xba\x05\x1c\xce\x1b\x6b\x76\xfa\x18\x82\xe5\xc5\x64\x25\x5c\xc1\x4c\x12\x0d\x2f\xf9\xbb\x4f\x83\x50\xfd\xeb\xad\xe6\xed\xb6\xe2\xe5\x66\x4e\x93\xd2\xa3\x4b\x3b\xbd\x71\xe7\x31\x54\xcc\x46\xf1\xcb\x17\xcb\x95\x65\x3b\x8c\xd0\x7a\xc1\x38\xd6\xe6\x2d\x2b\xad\xbf\x28\x55\x39\x3f\x06\xa9\x67\x67\x03\x85\x7a\xf3\xf2\x78\xa2\xd8\xf7\x74\xbf\x96\xeb\xf3\xfa\xa6\x7a\x83\x5c\x09\x58\x1c\x67\xd5\xe7\xca\x2e\x55\x7c\xd5\x4a\xd8\xd8\x04\x97\x4a\x3e\xfd\x60\x59\xbe\x2a\x6a\x9f\x6a\x9e\x9e\xe2\x08\xd3\xa0\x22\xb6\xd6\xe4\xa6\x91\x18\x96\x75\xad\x7b\xc7\x57\x5f\xf0\xd5\xd1\x86\x61\xa8\xa1\x8d\x33\x16\x05\xb6\x6e\x84\x61\x52\x74\xe1\x97\x56\x5a\x96\x27\x0c\xc5\xd9\x82\x51\x99\xc5\x3c\xc1\xac\x49\x29\xed\x37\x02\x5e\xd8\x22\x43\x3c\x90\x8e\x62\x34\x26\x48\x2c\x26\xdb\x4b\x0e\x63\x7f\x7a\x0d\xd7\x8f\x08\x57\xf3\x33\x6f\x97\x6a\xbf\x21\x6a\xa6\x34\x6f\xef\x02\xd3\xf0\x7f\x47\x1d\x00\xea\x7e\xf3\x23\x22\x6a\x3b\x8b\xe6\x9d\x58\xe3\x34\x9f\x5d\xaa\xe6\x4e\x6d\xad\x73\xcb\x4d\xc9\x26\x50\x4f\xfc\x94\x84\x6b\xa2\x5e\xb2\x7b\xbc\x18\xf7\x13\x2a\xbf\xfc\xa2\xb6\xdb\x22\x49\xcb\x36\x2d\x89\xb0\x54\x87\xb4\x64\x0f\x21\x6b\xf5\xb7\x96\xc7\xf3\x32\xde\xea\x3e\x1b\x8c\x1c\xc7\x1d\x0c\x8a\x77\x9a\xeb\x79\x3d\xaf\x7c\xc9\xb9\x9e\xdf\xed\x0d\x7d\xf7\x41\x67\x30\xac\x50\x2a\xab\x27\xae\xe7\x1c\xd9\xdd\xa1\x99\x67\x41\xad\x50\x06\x47\xbd\xbe\x99\x27\xa3\x54\x57\xef\x8f\x6a\xb6\xdf\x1f\x99\x17\xed\x93\xde\x68\xae\x57\xb7\x37\xba\x77\x54\x31\xe6\x8e\x7d\x6c\x77\x1d\xb7\x66\xcb\x42\xf7\xd5\xdb\x6c\xc7\xc9\xce\x39\xee\x39\xf7\x8d\xec\xf3\x0d\xab\x1d\x34\xdf\x35\x18\xda\x43\xb7\x22\x2c\x53\x77\xa5\xa0\xd2\x0e\xb3\x90\x43\xd7\xe9\x9c\xd8\xc7\x7e\xdf\xf6\x06\xae\xef\x7a\xa5\xb8\x0f\x3d\xbb\x3b\xb0\x9d\x61\xa7\xd7\xf5\xef\xda\x9d\x63\xf7\xd0\x64\x64\xe5\xd8\xa1\x67\x1f\xba\x7e\xdf\x7e\xe8\x7b\xa3\xae\x99\x60\xc8\xba\x25\xd1\x7d\xd0\xef\x78\x6e\x95\xd6\xf3\x0e\xf3\x3c\x3c\xb1\x87\xce\x91\xaf\xcc\x5b\x63\x6e\xa7\xfb\x95\x7d\xdc\x59\xdd\xa2\xcd\x75\xa9\xc5\x57\xf6\xf2\xbf\xc7\x58\x28\x0e\x41\x62\x12\x6d\x52\xcd\xda\x3f\x0f\x39\x84\x69\x90\x0f\x77\xb6\x54\x38\xe6\x23\x8d\xcd\x5f\x4f\xa9\xf4\xb3\xa1\x9f\x4f\x59\x1b\xdb\x24\x89\xc1\x87\x67\x09\xe1\xcd\xcb\x62\x81\x9d\x32\x49\xc6\x53\x3f\xe5\x51\x1b\xee\xf2\xdc\xec\xca\xec\x31\xf0\xe0\x0c\xb7\x8b\x29\x96\x12\x07\x67\xed\x94\xd6\x32\x11\x35\xbb\xda\x2b\xb9\xdc\x22\x5d\xb6\xd0\xbf\x57\xff\x2d\xa5\xb1\xe5\x1f\xac\xc5\xfe\x6f\x7b\xac\x32\xf6\xcc\x4d\xd6\xfe\x0e\x77\x41\x0a\xf1\xcf\xb6\xdc\x90\x57\x46\xe2\x3b\xda\x8d\xcf\x4a\xdd\xda\x70\xac\xb3\x9c\x33\xc9\x4e\xd3\xb1\x4d\x37\xaa\xbd\x6a\x7f\xdb\xd2\x77\x8e\xa3\x74\x5d\xfc\x6a\x92\xea\x74\x2a\xd7\x0e\xea\x4a\x7f\x26\xd8\xc0\x44\xd0\x04\x34\xb6\x6f\x55\x7a\x12\x2a\x61\xa2\xfd\x47\x53\x19\x34\x9f\xdf\xaa\xab\xf8\x42\xe0\x49\xab\x9b\x6a\x56\xb6\x2b\x7f\x91\xda\x5a\x81\x29\xa4\x94\xb9\xa4\x94\xe3\xb4\xa7\x7e\x2e\xf6\xfe\x0d\x00\x00\xff\xff\xa4\x40\x97\x80\x26\x29\x00\x00")

func proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json,
		"proto/micro_mall_pay_proto/pay_business/pay_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_pay_proto/pay_business/pay_business.swagger.json": proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_pay_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"pay_business": &_bintree_t{nil, map[string]*_bintree_t{
				"pay_business.swagger.json": &_bintree_t{proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}
