package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xcd\x4e\xdb\x40\x10\xbe\xfb\x29\x56\xdb\x1e\x2b\x42\x51\xd5\x03\xb7\x60\x22\x40\x40\x82\xf2\x23\xb5\xaa\x90\xb5\xac\x27\xc9\x22\xef\xae\xd9\x1f\xda\xa8\x8a\xd4\x17\xe8\x8d\x4a\xbd\xf5\x11\x7a\xab\x2a\xf1\x3a\x94\xbe\x46\xb5\x4e\xe2\xac\x1d\x87\x84\x40\x73\xb2\x77\x66\xbe\xfd\x66\xe6\x1b\x4f\x3e\x07\x08\x61\xfd\x91\x0c\x06\xa0\xf0\x2e\xc2\x3b\x5b\xdb\xf8\x95\x3b\x63\xa2\x2f\xf1\x2e\x72\x76\x84\xb0\x61\x26\x01\x67\x4f\x95\x34\xb2\xc6\x19\x55\x32\xe2\x24\x49\xa2\x94\x8c\xa2\xc9\xa1\x7b\xba\xb0\x9a\x09\xd0\xba\xf0\xb2\x95\xd9\x33\x58\x84\xf0\x35\x28\xcd\xa4\x70\x60\xd3\x47\x24\xa4\x41\x1a\x0c\x0e\x10\x1a\x67\x97\x53\x29\xb4\xe5\xa0\xf1\x2e\xfa\x30\x89\x22\x69\x9a\x30\x4a\x0c\x93\xa2\x76\xa9\xa5\x70\xbe\xe7\x99\x6f\xaa\x64\x6c\xe9\x9a\xbe\xc4\x0c\xf5\x3c\xab\xda\xf5\xeb\x9a\x51\x24\x06\x47\x37\x3f\x76\x7e\x52\x1b\xef\xdd\x95\xc8\x72\x4e\x94\x73\xc2\x7f\x6f\x7f\xdc\xfd\xfe\x72\x7f\xf3\xeb\xcf\xd7\x6f\xf7\x37\x3f\xef\x6e\xbf\x4f\x53\xcb\x1c\x65\x0a\x2a\xbb\xfa\x28\x76\xce\x5d\x07\x7f\x46\x46\xbe\x8b\x02\x9d\x4a\xa1\x41\x17\xae\x40\x08\xef\x6c\x6f\x97\x8e\x10\xc2\x31\x68\xaa\x58\x6a\xa6\x35\xab\x23\x6d\x29\x05\xad\xfb\x36\x41\x33\xa4\x2d\x0f\x7e\x42\x97\x0e\x81\x93\x05\x30\x84\xf0\x4b\x05\x7d\x87\xf3\xa2\x16\x43\x9f\x09\xe6\x70\x8b\xed\x9a\x51\x6e\x4f\xc1\x71\x01\x62\x1c\x54\x3d\x8f\xbd\xf4\x52\xa2\x08\x07\x03\x6a\xde\x92\xc9\xaf\x94\x98\x20\x3c\x93\xd4\x85\x8c\x47\x65\xfe\x4c\x2c\xb3\x28\xb8\xb2\x4c\x81\x2b\xae\x51\x16\xfe\x4b\xde\x57\x16\xb4\x59\x27\xed\x73\x2f\x6d\x43\x06\xe5\x84\xf1\x19\x19\xed\x4d\xd1\x3b\xa0\xae\x19\xf5\x8a\x79\x1e\xf8\x68\xe3\x5c\xfb\x1e\xbd\xb9\x52\x7d\x9e\xa1\x64\xa2\x3b\x4a\xc1\x17\xac\x99\xbc\x63\x6d\x14\x13\x83\xbc\x66\x18\x84\xe5\x05\x52\x38\x6c\xbe\xf7\xb5\xd8\xeb\xec\xcf\x28\xe5\xc9\x38\x0a\xc4\x26\x6e\x02\x32\xf7\xc0\xeb\x70\x89\x09\xe7\x52\xe4\x3a\xa9\xe0\x23\x2f\x2e\x81\x9a\x39\x9f\x54\xb9\xf9\x30\xac\xa4\x7d\x4c\x65\x0c\xe5\x69\x58\xdd\xb1\x36\x98\xd0\x05\x56\xca\x90\xeb\x41\x19\xb1\x54\xa5\xa0\xdc\xd0\xf1\xd2\x4c\x67\x37\x6d\x54\xf2\x4e\x2f\x0c\x1b\x9d\x8e\x5f\xf6\x46\xbb\xdd\x6a\x17\xfb\xd0\x68\x47\xcd\x56\x37\x6a\xbc\x3b\xea\x74\x17\x2c\x0b\xa7\xa7\x8d\x76\x78\x58\x6f\x76\xab\x63\x72\xeb\x82\xa5\x73\xd8\x3a\xab\x8e\xc9\x2c\x8b\xa7\xc7\xbd\x25\xee\xc7\xbd\xea\xc3\xfa\x69\xab\x37\xe3\xd5\x6c\xf5\x0e\x0e\x17\x92\xd9\xab\x9f\xd4\x9b\x61\x63\x89\x4b\xce\xfd\x61\xb7\x7a\x18\x66\xf7\x9c\xb4\xc2\xe3\x07\x15\x3c\xab\xfe\xd2\xde\x66\x73\x7f\x20\x65\xac\xf7\xc1\x10\x96\x3c\x45\xc7\x84\x4b\x2b\xcc\x0a\xdd\xf9\xdf\x2c\xdc\x97\x8a\x93\x8c\x28\x13\xe6\xed\x9b\x6a\x2d\x53\xc9\x44\x64\x8a\x33\x8f\xd6\x9b\x91\xfc\x6b\x51\x09\xac\x20\xb6\x74\xba\x5a\x9e\x81\xf2\xca\x39\x2a\x7f\x63\x9f\x50\x6a\x69\x4d\x94\x2d\xef\x48\xc8\xb5\x07\xdd\xff\x5e\x33\x0e\x11\x7c\x4a\x99\x5a\xa8\xea\x3a\xe1\x42\x1a\xd6\x1f\x45\x56\x25\x9b\x44\x17\x97\xfa\xa3\xc3\x39\x28\x3a\x24\x2b\x85\x56\x19\x4b\x8c\x21\x74\xb8\x51\x24\xa5\x6b\xa8\x7b\x49\xbe\xa5\xc9\x42\x8f\xd8\xc9\xfe\x6c\x6e\xa4\xb5\xe7\xd8\x4f\x6e\xd3\x6d\x32\x7d\x85\x0d\x59\x2d\xc4\x4c\xc4\x2c\xde\x70\x5b\xb9\x3f\x0e\xc1\x38\xf8\x17\x00\x00\xff\xff\xdd\xed\x53\xcf\xc9\x0b\x00\x00")

func proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json,
		"proto/micro_mall_pay_proto/pay_business/pay_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_pay_proto/pay_business/pay_business.swagger.json": proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_pay_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"pay_business": &_bintree_t{nil, map[string]*_bintree_t{
				"pay_business.swagger.json": &_bintree_t{proto_micro_mall_pay_proto_pay_business_pay_business_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
